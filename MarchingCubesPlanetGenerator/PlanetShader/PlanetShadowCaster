#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl"

struct Attributes
{
    float3 positionOS : POSITION;
    float3 normalsOS : NORMAL;
};

struct Interpolators
{
    float4 positionCS : SV_POSITION;
};

float3 _LightDirection;

float4 GetShadowCasterPositionCS(float3 positionWS, float3 normalWS)
{
    float3 lightDirectionWS = _LightDirection;
    float4 positionCS = TransformWorldToHClip(ApplyShadowBias(positionWS, normalWS, lightDirectionWS));
    #if UNITY_REVERSED_Z
    positionCS.z = min(positionCS.z, UNITY_NEAR_CLIP_VALUE);
    #else
    positionCS.z = max(positionCS.z, UNITY_NEAR_CLIP_VALUE);
    #endif

    return positionCS;
}

Interpolators Vertex(Attributes input)
{
    Interpolators output;

    float3 positionOS = input.positionOS;

    VertexPositionInputs position_inputs = GetVertexPositionInputs(positionOS);
    VertexNormalInputs normal_inputs = GetVertexNormalInputs(input.normalsOS);

    output.positionCS = GetShadowCasterPositionCS(position_inputs.positionWS, normal_inputs.normalWS);

    return output;
}

float4 Fragment(Interpolators input) : SV_TARGET
{
    return 1;
}